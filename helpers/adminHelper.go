package helpers

import (
	"campmart/models"
	"io/ioutil"
	"log"
	"strings"
)

// ProcessImageAndReturnNames processes product images and returns their names as stored in specified path.
// See type Image in generalModel.go
func ProcessImageAndReturnNames(productImages []models.Image, ID, path string) ([]string, error) {
	// range over the project images and store in path
	for _, image := range productImages {
		// read bytes from image file
		bs, err := ioutil.ReadAll(image.File)
		if err != nil {
			log.Printf("Error processing image: %v, errormsg{%v}", image.Name, err)
		}

		// pattern is a th name of each image file which is
		// a string generated by concatenating
		// databaseId, random string generated by ioutil.Tempfile and the image extension
		pattern := ID + "*" + image.Extension
		tempfile, err := ioutil.TempFile(path, pattern)
		if err != nil {
			log.Printf("Erorr creating tempfile for %v, errormsg{%v}", image.Name, err)
		}
		defer tempfile.Close()

		tempfile.Write(bs)
	}

	// read images directory
	filesInProductDir, err := ioutil.ReadDir(path)
	if err != nil {
		log.Printf("Error reading product images drectory: %v", err)
		return []string{}, err
	}

	// check for newly uploaded images and append ther names to imgNames variable
	var imgNames []string

	for _, file := range filesInProductDir {
		if strings.Contains(file.Name(), ID) {
			imgNames = append(imgNames, file.Name())
		}
	}

	return imgNames, nil
}
